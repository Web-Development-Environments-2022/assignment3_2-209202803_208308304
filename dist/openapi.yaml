openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.84.107"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: user
  description: Users register and login calls
- name: personal
  description: Operations available to logged in users
- name: recipes
  description: Operations of Display recipes and mark them as watched/liked
- name: search
  description: Search recipes by term with optional filters
paths:
  /user/register:
    post:
      tags:
      - user
      summary: adds a new user to the DB
      description: A json object that contains all the details about the new user.
      operationId: "1"
      requestBody:
        description: user details to add to the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        "201":
          description: new user created
        "400":
          description: invalid input
        "409":
          description: username already exists
  /user/login:
    post:
      tags:
      - user
      summary: login to the system
      description: A json object that contains username and password for the server to verify.
      operationId: "2"
      requestBody:
        description: user details for the server to verify
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "200":
          description: successful login
        "400":
          description: invalid input
        "404":
          description: username or password incorrect
  #/user/logout:        
  /personal/favorites/{username}:
    get:
      tags:
      - personal
      summary: get favorite recipes of a specific user
      description: get from client a username and return his favorite recipes.
      operationId: "3"
      parameters:
      - name: username
        in: path
        description: the username of the user for which we want the favorites list
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: returns a json object with array of favorite recipes of the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preview'
        "404":
          description: favorite recipes does not exist for this user
  /personal/myrecipes/{username}:
    get:
      tags:
      - personal
      summary: get the recipes created by a specific user
      description: get from client a username and return the recipes he created.
      operationId: "4"
      parameters:
      - name: username
        in: path
        description: the username of the user for which we want the personal recipes list
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: returns a json object with array of user's personal recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preview'
        "404":
          description: personal recipes does not exist for this user
  /personal/familyrecipes/{username}:
    get:
      tags:
      - personal
      summary: get the family recipes of a specific user
      description: get from client a username and return his family recipes.
      operationId: "5"
      parameters:
      - name: username
        in: path
        description: the username of the user for which we want the family recipes list.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: returns a json object with array of family recipes of the user.
          content:
            application/json:
              schema:
                minItems: 3
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        "404":
          description: family recipes does not exist for this user
  /recipes:
    get:
      tags:
      - recipes
      summary: get main recipes page
      description: get from server 3 different random recipes when user is not logged in
      operationId: "6"
      responses:
        "200":
          description: list of 3 random recipes return succesfuly
          content:
            application/json:
              schema:
                maxItems: 3
                minItems: 3
                uniqueItems: true
                type: array
                description: 3 random previews of recipes
                example:
                - Preview_1
                - Preview_2
                - Preview_3
                items:
                  $ref: '#/components/schemas/Preview'
        "404":
          description: there are no 3 recipes to return
    put:
      tags:
      - recipes
      summary: add recipe to the user's last watched recipe array
      description: add this recipe to users last watched recipe list
      operationId: "12"
      requestBody:
        description: sends user name and recipe id to append recipe to the user last watched recipes list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeByUser'
        required: true
      responses:
        "201":
          description: recipe has been successfuly added to the user's last watched array
        "404":
          description: couldnt find username or recipe_id
  /recipes/{username}:
    get:
      tags:
      - recipes
      summary: get main recipes page when user is logged in
      description: get from server an object with two arrays- 3 random recipes and 3 last watched recipes by the user
      operationId: "7"
      parameters:
      - name: username
        in: path
        description: the username of the user for which we want display recipes page with last watched recipes list
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: returns a json object with two arrays- 3 random recipes and 3 last watched recipes by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomePageResponse'
        "404":
          description: there are no recipes to return
  /recipes/{recipe_id}:
    get:
      tags:
      - recipes
      summary: get recipe page by recipe Id
      description: get from server a recipe and its content by recipe Id
      operationId: "8"
      parameters:
      - name: recipe_id
        in: path
        description: the recipe Id of the recipe we would like to display its content
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: returns a json object with recipe content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullRecipe'
        "404":
          description: there is no recipe to return
  /search:
    get:
      tags:
      - search
      summary: search recipe by query and parameters
      description: returns a json object with a list of recipes containing the query name
      operationId: "9"
      parameters:
      - name: recipeName
        in: query
        description: The recipe's full/partial name
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: numOfResults
        in: query
        description: number of results the server should returl, can be 5/10/15
        required: true
        style: form
        explode: true
        schema:
          maximum: 15
          minimum: 5
          type: integer
      - name: cuisinesFilter
        in: query
        description: user can filter recipes by specifics cusines
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - African
            - American
            - British
            - Cajun
            - Caribbean
            - Chinese
            - EasternEuropean
            - European
            - French
            - German
            - Greek
            - Indian
            - Irish
            - Italian
            - Japanese
            - Jewish
            - Korean
            - LatinAmerican
            - Mediterranean
            - Mexican
            - MiddleEastern
            - Nordic
            - Southern
            - Spanish
            - Thai
            - Vietnamese
      - name: dietsFilter
        in: query
        description: user can filter recipes by specifics diets
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - GlutenFree
            - Ketogenic
            - Vegetarian
            - LactoVegetarian
            - OvoVegetarian
            - Vegan
            - Pescetarian
            - Paleo
            - Primal
            - LowFODMAP
            - Whole30
      - name: intolerancesFilter
        in: query
        description: user can filter out recipes by specifics intolerances
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - Dairy
            - Egg
            - Gluten
            - Grain
            - Peanut
            - Seafood
            - Sesame
            - Shellfish
            - Soy
            - Sulfite
            - Tree Nut
            - Wheat
      responses:
        "200":
          description: returns a json object with array of recipes with the given name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preview'
        "404":
          description: recipes not found
  /personal/myrecipes:
    post:
      tags:
      - personal
      summary: create a new recipe, which will be added to 'my recipes'
      description: A json object that contains all the details about the new recipe and the username.
      operationId: "10"
      requestBody:
        description: recipe details to add to the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
        required: true
      responses:
        "201":
          description: new recipe created
        "400":
          description: invalid input
  /personal/favorite:
    put:
      tags:
      - personal
      summary: update favorite recipes of a specific user
      description: sends user name and recipe Id to append recipe to the user favorite recipes list
      operationId: "11"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeByUser'
        required: true
      responses:
        "201":
          description: successful add recipe to favorite recipes of the user
        "404":
          description: could not find user name or recipe Id
components:
  schemas:
    Register:
      required:
      - country
      - email
      - firstname
      - lastname
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3-8 characters, letters only
          example: eyalshan
        firstname:
          type: string
          description: user's first name
          example: Eyal
        lastname:
          type: string
          description: user's last name
          example: Shani
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password contains between 5-10 characters, should contain at least one digit and one special character
          format: password
          example: tom@t0s
        email:
          type: string
          description: user's email
          format: email
          example: eyalShani@gmail.com
    Login:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3-8 characters, letters only
          example: eyalshan
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password contains between 5-10 characters, should contain at least one digit and one special character
          format: password
          example: tom@t0s
    Preview:
      required:
      - glutenMark
      - image
      - isFavorite
      - isWatched
      - populatiry
      - prepTime
      - recipe_id
      - title
      - veganMark
      - vegetarianMark
      type: object
      properties:
        recipe_id:
          type: string
          description: recipe's Id in the system
          example: "12345"
        image:
          type: string
          description: URL for the recipe's image
          format: URL
          example: https://img.mako.co.il/2018/05/07/IMG_2700_i.jpg
        title:
          type: string
          description: a recipe's name/title
          example: bolognese lasagna
        prepTime:
          minimum: 0
          type: integer
          description: preperation time in minutes, greater that 0
          example: 40
        populatiry:
          minimum: 0
          type: integer
          description: number of likes a recipe has
          example: 504
        veganMark:
          type: string
          description: marks this recipe as vegan or not
          example: true
          type: boolean
        vegetarianMark:
          type: string
          description: marks this recipe as vegetarian or not
          example: true
          type: boolean
        glutenMark:
          type: boolean
          description: marks this recipes as gluten free(true) or not gluten free(false)
          example: false
        isWatched:
          type: boolean
          description: marks this recipes as watched (true) if the user viewed this recipe or not (false)
          example: true
        isFavorite:
          type: boolean
          description: marks this recipes as favorite (true) if the user liked this recipe or not (false)
          example: true
    FamilyRecipe:
      required:
      - Ingredients
      - Instructions
      - Preview
      - owner
      - tradition
      type: object
      properties:
        Preview:
          $ref: '#/components/schemas/Preview'
        owner:
          type: string
          description: the name of the person the recipe belongs.
          example: grandma Iris
        tradition:
          type: string
          description: when the recipe is customary to prepare it in the family
          example: we make this recipe every passover, exactly like the recipe.
        Ingredients:
          type: array
          description: a list of the ingredients and the amount for the recipe.
          example:
          - Ingredient_1
          - Ingredient_2
          items:
            $ref: '#/components/schemas/Ingredient'
        Instructions:
          type: array
          description: a list of the instructions of the recipe, every cell is a step.
          example:
          - boil water
          - add salt
          - add the pasta for 10 minutes
          items:
            type: string
    Ingredient:
      required:
      - amount
      - metric
      - name
      type: object
      properties:
        name:
          type: string
          description: the name of the ingredient
          example: eggs
        amount:
          minimum: 0
          type: number
          description: the amount of the ingredient,must be positive number.
          format: float
          example: 4
        metric:
          type: string
          description: the measurement metric of the ingredient
          example: units
          enum:
          - units
          - tsp
          - tbsp
          - cup
          - g
          - ml
          - pinch
    FullRecipe:
      required:
      - Ingredients
      - Instructions
      - Preview
      - servingsAmount
      type: object
      properties:
        Preview:
          $ref: '#/components/schemas/Preview'
        Ingredients:
          type: array
          description: a list of the ingredients and the amount for the recipe.
          example:
          - Ingredient_1
          - Ingredient_2
          items:
            $ref: '#/components/schemas/Ingredient'
        Instructions:
          type: array
          description: a list of the instructions of the recipe, every cell is a step.
          example:
          - boil water
          - add salt
          - add the pasta for 10 minutes
          items:
            type: string
        servingsAmount:
          minimum: 1
          type: integer
          description: the recipe's amount of servings
          example: 4
    NewRecipe:
      required:
      - FullRecipe
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3-8 characters, letters only
          example: eyalshan
        FullRecipe:
          $ref: '#/components/schemas/FullRecipe'
    HomePageResponse:
      required:
      - lastWatchedRecipes
      - randomRecipes
      type: object
      properties:
        randomRecipes:
          maxItems: 3
          minItems: 3
          uniqueItems: true
          type: array
          description: return previews of 3 random  recipes
          example:
          - Preview_1
          - Preview_2
          - Preview_3
          items:
            $ref: '#/components/schemas/Preview'
        lastWatchedRecipes:
          maxItems: 3
          minItems: 3
          uniqueItems: true
          type: array
          description: return previews of user's 3 last watched recipes
          example:
          - Preview_1
          - Preview_2
          - Preview_3
          items:
            $ref: '#/components/schemas/Preview'
    RecipeByUser:
      required:
      - recipe_id
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3-8 characters, letters only
          example: eyalshan
        recipe_id:
          type: string
          description: recipe's Id in the system
          example: "12345"
